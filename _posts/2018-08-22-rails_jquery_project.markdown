---
layout: post
title:      "Rails/jQuery Project"
date:       2018-08-23 01:13:47 +0000
permalink:  rails_jquery_project
---


The next project on Learn involved adding dynamic features to my previous Rails application by using jQuery and a JSON API. So I thought it might be cool to be able to click on a category name from the index page, navigate to a list of that category’s subcategories and on that same page, get a list that displays all of the articles for that subcategory. I also thought it might be helpful to be able to quickly grab the next article title when on a given article’s show page. And lastly, one of the requirements was to fill out a form and create a new resource all without redirecting the page so I decided to implement it so that a user can create a new reading list on the reading list index page and immediately have it added to their current display of existing lists. Once I had an idea of what I wanted the end results to look like, I began working on the backend API. 

I started by adding the Active Model Serializer gem to the gemfile and generated serializer files for the 3 main models of the article interface- the Category, Subcategory and Article models. In these files, I specified the types of attributes I wanted to get back from the endpoint and as well as all of the relevant model associations. In hindsight, I probably should have made and worked on one serializer file at a time since once I started building out the endpoints, I quickly realized which attributes I really did and didn’t need so just to keep in mind later, efficiency-wise. For building out the category/subcategory index page functionality, I then made updates to the Category and Subcategory controllers and set up the endpoints to serve JSON data from the server. Once I knew the endpoints were working properly, I created the page specific JavaScript file for the Category model under the `app/assets/javascripts` directory (a .js file for just the Category model sufficed as my Subcategory routes are nested under those for Categories). 

Here, there was a little trouble with getting the file to load in the browser. After some sleuthing, I realized that the asset pipeline wasn’t loading the .js file for a couple reasons: I’d forgotten to add the file onto the precompile array so the asset pipeline didn’t know to process it. So I added the file onto the array in `config/initializers/assets.rb` . Also, I had a coffeescript file with the same name, which was most likely created when I used the Rails generators back in the initial development stages. I’d read online that Rails can have issues with precompiling the wrong file when that happens so once I deleted the coffeescript file, the .js file was able to load successfully and the alert message that I had added for testing finally popped up. Yay, we were on our way! 

From then on, everything else went pretty smoothly. The next step involved adding in CSS selectors to the Category show page so that the event handler is able to pick up the right elements in the DOM. Once the click event for those selectors was able to be intercepted,  I was able to make AJAX calls to the JSON endpoints with jQuery, get back the requested JSON data, and insert that data response (list of articles for a chosen category’s subcategory) into the DOM. I followed similar steps in building out the show next article feature. 

While building out the create new reading list from a form, I was struggling to get the initial form partial to render under the user’s list of existing reading lists. I tested out several different scenarios..and let’s just say I’ve become quite familiar with the JavaScript console at this point haha. But the main thing that I couldn’t get working was setting the correct endpoint in the data-url attribute for the “Create a Reading List” button. It was really a matter of not knowing my routes as well as I should have. Running `rails routes` and seeing the flows - particularly remembering that the creating a new reading list action is only allowed to registered users and thus the partial would need to be tied to a current user’s id - helped me figure this one out in the end.

This project has been my favorite project so far in the Learn curriculum. Using and playing around jQuery has been really, really fun. It’s been challenging for me to grasp JavaScript after coming from Ruby but after completing this particular project, I now have a better understanding of how powerful the language can be and how these different parts all fit together in an whole application. 
